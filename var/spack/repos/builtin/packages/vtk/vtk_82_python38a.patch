From 291aca0c7b682028c42c7f50995821ae01599fbd Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Thu, 5 Dec 2019 21:00:17 -0500
Subject: [PATCH 1/5] clang-tidy: call static methods via the class in
 generated code

---
 Wrapping/Tools/vtkWrapPythonMethod.c | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/Wrapping/Tools/vtkWrapPythonMethod.c b/Wrapping/Tools/vtkWrapPythonMethod.c
index b96a092fedc..769ed0699c1 100644
--- a/Wrapping/Tools/vtkWrapPythonMethod.c
+++ b/Wrapping/Tools/vtkWrapPythonMethod.c
@@ -730,8 +730,8 @@ void vtkWrapPython_SaveArgs(FILE* fp, FunctionInfo* currentFunction)
     {
       noneDone = 0;
 
-      fprintf(
-        fp, "    ap.Save(%.*stemp%d, %.*ssave%d, ", (n - 1), asterisks, i, (n - 1), asterisks, i);
+      fprintf(fp, "    vtkPythonArgs::Save(%.*stemp%d, %.*ssave%d, ", (n - 1), asterisks, i,
+        (n - 1), asterisks, i);
 
       if (vtkWrap_IsNArray(arg))
       {
@@ -994,8 +994,8 @@ static void vtkWrapPython_WriteBackToArgs(FILE* fp, ClassInfo* data, FunctionInf
                vtkWrap_IsCharPointer(arg)) &&
       !vtkWrap_IsConst(arg) && !vtkWrap_IsSetVectorMethod(currentFunction))
     {
-      fprintf(fp, "    if (ap.HasChanged(%.*stemp%d, %.*ssave%d, ", (n - 1), asterisks, i, (n - 1),
-        asterisks, i);
+      fprintf(fp, "    if (vtkPythonArgs::HasChanged(%.*stemp%d, %.*ssave%d, ", (n - 1), asterisks,
+        i, (n - 1), asterisks, i);
 
       if (vtkWrap_IsNArray(arg))
       {
@@ -1035,7 +1035,7 @@ static void vtkWrapPython_WriteBackToArgs(FILE* fp, ClassInfo* data, FunctionInf
         "    {\n"
         "      PyObject *vec = (temp%d.size() == 0 ?\n"
         "        PyTuple_New(0) :\n"
-        "        ap.BuildTuple(temp%d.data(), temp%d.size()));\n"
+        "        vtkPythonArgs::BuildTuple(temp%d.data(), temp%d.size()));\n"
         "      ap.SetContents(%d, vec);\n"
         "      Py_DECREF(vec);\n"
         "    }\n"
-- 
GitLab


From 5de1b32dff303adafa52c19c6c42560898691995 Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Thu, 5 Dec 2019 21:00:35 -0500
Subject: [PATCH 2/5] clang-tidy: use nullptr in generated code

---
 Wrapping/Tools/vtkWrapPythonMethodDef.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Wrapping/Tools/vtkWrapPythonMethodDef.c b/Wrapping/Tools/vtkWrapPythonMethodDef.c
index 742ea484ffa..3acdf0061d2 100644
--- a/Wrapping/Tools/vtkWrapPythonMethodDef.c
+++ b/Wrapping/Tools/vtkWrapPythonMethodDef.c
@@ -982,7 +982,7 @@ static void vtkWrapPython_CustomMethods(
       "    if (tempr != nullptr)\n"
       "    {\n"
       "      result = vtkPythonArgs::BuildVTKObject(tempr);\n"
-      "      PyVTKObject_GetObject(result)->UnRegister(0);\n"
+      "      PyVTKObject_GetObject(result)->UnRegister(nullptr);\n"
       "    }\n"
       "  }\n"
       "\n"
-- 
GitLab


From 69790a0105c451f491b0f0bff998efb7b596ec46 Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Thu, 5 Dec 2019 21:00:53 -0500
Subject: [PATCH 3/5] clang-tidy: use C++ versions of C headers in generated
 code

---
 Wrapping/Tools/vtkWrapPythonInit.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Wrapping/Tools/vtkWrapPythonInit.c b/Wrapping/Tools/vtkWrapPythonInit.c
index 0aba220db5c..ff5b504b20d 100644
--- a/Wrapping/Tools/vtkWrapPythonInit.c
+++ b/Wrapping/Tools/vtkWrapPythonInit.c
@@ -52,7 +52,7 @@ static void CreateImplFile(const char* libName, const char* importName, int numD
   fprintf(fout, "// Generated by vtkWrapPythonInit in VTK/Wrapping\n");
   fprintf(fout, "#include \"vtkPythonUtil.h\"\n");
   fprintf(fout, "#include \"vtkSystemIncludes.h\"\n");
-  fprintf(fout, "#include <string.h>\n");
+  fprintf(fout, "#include <cstring>\n");
   fprintf(fout,
     "// Handle compiler warning messages, etc.\n"
     "#if defined( _MSC_VER ) && !defined(VTK_DISPLAY_WIN32_WARNINGS)\n"
-- 
GitLab


From 032f48195a5d5745b1373f5a740b96a5610b0261 Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Thu, 5 Dec 2019 21:01:08 -0500
Subject: [PATCH 4/5] clang-tidy: avoid not-using-nullptr warnings in generated
 code

---
 Wrapping/Tools/vtkWrapPythonClass.c | 4 ++++
 Wrapping/Tools/vtkWrapPythonEnum.c  | 4 ++++
 Wrapping/Tools/vtkWrapPythonType.c  | 4 ++++
 3 files changed, 12 insertions(+)

diff --git a/Wrapping/Tools/vtkWrapPythonClass.c b/Wrapping/Tools/vtkWrapPythonClass.c
index af9eb08118d..7c609c43cc7 100644
--- a/Wrapping/Tools/vtkWrapPythonClass.c
+++ b/Wrapping/Tools/vtkWrapPythonClass.c
@@ -510,7 +510,11 @@ void vtkWrapPython_GenerateObjectType(FILE* fp, const char* module, const char*
     "  sizeof(PyVTKObject), // tp_basicsize\n"
     "  0, // tp_itemsize\n"
     "  PyVTKObject_Delete, // tp_dealloc\n"
+    "#if PY_VERSION_HEX >= 0x03080000\n"
     "  0, // tp_vectorcall_offset\n"
+    "#else\n"
+    "  nullptr, // tp_print\n"
+    "#endif\n"
     "  nullptr, // tp_getattr\n"
     "  nullptr, // tp_setattr\n"
     "  nullptr, // tp_compare\n"
diff --git a/Wrapping/Tools/vtkWrapPythonEnum.c b/Wrapping/Tools/vtkWrapPythonEnum.c
index 26bde605038..5563239875d 100644
--- a/Wrapping/Tools/vtkWrapPythonEnum.c
+++ b/Wrapping/Tools/vtkWrapPythonEnum.c
@@ -188,7 +188,11 @@ void vtkWrapPython_GenerateEnumType(
     "  sizeof(PyIntObject), // tp_basicsize\n"
     "  0, // tp_itemsize\n"
     "  nullptr, // tp_dealloc\n"
+    "#if PY_VERSION_HEX >= 0x03080000\n"
     "  0, // tp_vectorcall_offset\n"
+    "#else\n"
+    "  nullptr, // tp_print\n"
+    "#endif\n"
     "  nullptr, // tp_getattr\n"
     "  nullptr, // tp_setattr\n"
     "  nullptr, // tp_compare\n"
diff --git a/Wrapping/Tools/vtkWrapPythonType.c b/Wrapping/Tools/vtkWrapPythonType.c
index 26d1fd515e2..5a1de36c6ae 100644
--- a/Wrapping/Tools/vtkWrapPythonType.c
+++ b/Wrapping/Tools/vtkWrapPythonType.c
@@ -682,7 +682,11 @@ void vtkWrapPython_GenerateSpecialType(FILE* fp, const char* module, const char*
     "  sizeof(PyVTKSpecialObject), // tp_basicsize\n"
     "  0, // tp_itemsize\n"
     "  Py%s_Delete, // tp_dealloc\n"
+    "#if PY_VERSION_HEX >= 0x03080000\n"
     "  0, // tp_vectorcall_offset\n"
+    "#else\n"
+    "  nullptr, // tp_print\n"
+    "#endif\n"
     "  nullptr, // tp_getattr\n"
     "  nullptr, // tp_setattr\n"
     "  nullptr, // tp_compare\n"
-- 
GitLab


From 9ac4a3e544a63608e0ef2a8bc2e2e5dffdac02db Mon Sep 17 00:00:00 2001
From: Ben Boeckel <ben.boeckel@kitware.com>
Date: Fri, 6 Dec 2019 05:56:31 -0500
Subject: [PATCH 5/5] Wrapping/PythonCore: be more explicit in PyTypeObject
 definitions

---
 Wrapping/PythonCore/PyVTKNamespace.cxx | 84 ++++++++++++++------------
 Wrapping/PythonCore/PyVTKReference.cxx | 56 +++++++++++------
 Wrapping/PythonCore/PyVTKTemplate.cxx  | 12 ++--
 3 files changed, 88 insertions(+), 64 deletions(-)

diff --git a/Wrapping/PythonCore/PyVTKNamespace.cxx b/Wrapping/PythonCore/PyVTKNamespace.cxx
index 4e110ef793b..7912fcfe5a8 100644
--- a/Wrapping/PythonCore/PyVTKNamespace.cxx
+++ b/Wrapping/PythonCore/PyVTKNamespace.cxx
@@ -47,46 +47,50 @@ PyTypeObject PyVTKNamespace_Type = { PyVarObject_HEAD_INIT(
   0,                     // tp_basicsize
   0,                     // tp_itemsize
   PyVTKNamespace_Delete, // tp_dealloc
-  0,                     // tp_vectorcall_offset
-  nullptr,               // tp_getattr
-  nullptr,               // tp_setattr
-  nullptr,               // tp_compare
-  nullptr,               // tp_repr
-  nullptr,               // tp_as_number
-  nullptr,               // tp_as_sequence
-  nullptr,               // tp_as_mapping
-  nullptr,               // tp_hash
-  nullptr,               // tp_call
-  nullptr,               // tp_string
-  nullptr,               // tp_getattro
-  nullptr,               // tp_setattro
-  nullptr,               // tp_as_buffer
-  Py_TPFLAGS_DEFAULT,    // tp_flags
-  PyVTKNamespace_Doc,    // tp_doc
-  nullptr,               // tp_traverse
-  nullptr,               // tp_clear
-  nullptr,               // tp_richcompare
-  0,                     // tp_weaklistoffset
-  nullptr,               // tp_iter
-  nullptr,               // tp_iternext
-  nullptr,               // tp_methods
-  nullptr,               // tp_members
-  nullptr,               // tp_getset
-  &PyModule_Type,        // tp_base
-  nullptr,               // tp_dict
-  nullptr,               // tp_descr_get
-  nullptr,               // tp_descr_set
-  0,                     // tp_dictoffset
-  nullptr,               // tp_init
-  nullptr,               // tp_alloc
-  nullptr,               // tp_new
-  nullptr,               // tp_free
-  nullptr,               // tp_is_gc
-  nullptr,               // tp_bases
-  nullptr,               // tp_mro
-  nullptr,               // tp_cache
-  nullptr,               // tp_subclasses
-  nullptr,               // tp_weaklist
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
+  nullptr,            // tp_getattr
+  nullptr,            // tp_setattr
+  nullptr,            // tp_compare
+  nullptr,            // tp_repr
+  nullptr,            // tp_as_number
+  nullptr,            // tp_as_sequence
+  nullptr,            // tp_as_mapping
+  nullptr,            // tp_hash
+  nullptr,            // tp_call
+  nullptr,            // tp_string
+  nullptr,            // tp_getattro
+  nullptr,            // tp_setattro
+  nullptr,            // tp_as_buffer
+  Py_TPFLAGS_DEFAULT, // tp_flags
+  PyVTKNamespace_Doc, // tp_doc
+  nullptr,            // tp_traverse
+  nullptr,            // tp_clear
+  nullptr,            // tp_richcompare
+  0,                  // tp_weaklistoffset
+  nullptr,            // tp_iter
+  nullptr,            // tp_iternext
+  nullptr,            // tp_methods
+  nullptr,            // tp_members
+  nullptr,            // tp_getset
+  &PyModule_Type,     // tp_base
+  nullptr,            // tp_dict
+  nullptr,            // tp_descr_get
+  nullptr,            // tp_descr_set
+  0,                  // tp_dictoffset
+  nullptr,            // tp_init
+  nullptr,            // tp_alloc
+  nullptr,            // tp_new
+  nullptr,            // tp_free
+  nullptr,            // tp_is_gc
+  nullptr,            // tp_bases
+  nullptr,            // tp_mro
+  nullptr,            // tp_cache
+  nullptr,            // tp_subclasses
+  nullptr,            // tp_weaklist
   VTK_WRAP_PYTHON_SUPPRESS_UNINITIALIZED };
 
 //--------------------------------------------------------------------
diff --git a/Wrapping/PythonCore/PyVTKReference.cxx b/Wrapping/PythonCore/PyVTKReference.cxx
index a97c2a82aab..bc9bfa0d203 100644
--- a/Wrapping/PythonCore/PyVTKReference.cxx
+++ b/Wrapping/PythonCore/PyVTKReference.cxx
@@ -975,14 +975,18 @@ PyTypeObject PyVTKReference_Type = { PyVarObject_HEAD_INIT(
   sizeof(PyVTKReference), // tp_basicsize
   0,                      // tp_itemsize
   PyVTKReference_Delete,  // tp_dealloc
-  0,                      // tp_vectorcall_offset
-  nullptr,                // tp_getattr
-  nullptr,                // tp_setattr
-  nullptr,                // tp_compare
-  PyVTKReference_Repr,    // tp_repr
-  nullptr,                // tp_as_number
-  nullptr,                // tp_as_sequence
-  nullptr,                // tp_as_mapping
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
+  nullptr,             // tp_getattr
+  nullptr,             // tp_setattr
+  nullptr,             // tp_compare
+  PyVTKReference_Repr, // tp_repr
+  nullptr,             // tp_as_number
+  nullptr,             // tp_as_sequence
+  nullptr,             // tp_as_mapping
 #if PY_VERSION_HEX >= 0x02060000
   PyObject_HashNotImplemented, // tp_hash
 #else
@@ -1027,10 +1031,14 @@ PyTypeObject PyVTKReference_Type = { PyVarObject_HEAD_INIT(
 //--------------------------------------------------------------------
 PyTypeObject PyVTKNumberReference_Type = { PyVarObject_HEAD_INIT(&PyType_Type,
                                              0) "vtkCommonCorePython.number_reference", // tp_name
-  sizeof(PyVTKReference),   // tp_basicsize
-  0,                        // tp_itemsize
-  PyVTKReference_Delete,    // tp_dealloc
-  0,                        // tp_vectorcall_offset
+  sizeof(PyVTKReference), // tp_basicsize
+  0,                      // tp_itemsize
+  PyVTKReference_Delete,  // tp_dealloc
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
   nullptr,                  // tp_getattr
   nullptr,                  // tp_setattr
   nullptr,                  // tp_compare
@@ -1082,10 +1090,14 @@ PyTypeObject PyVTKNumberReference_Type = { PyVarObject_HEAD_INIT(&PyType_Type,
 //--------------------------------------------------------------------
 PyTypeObject PyVTKStringReference_Type = { PyVarObject_HEAD_INIT(&PyType_Type,
                                              0) "vtkCommonCorePython.string_reference", // tp_name
-  sizeof(PyVTKReference),         // tp_basicsize
-  0,                              // tp_itemsize
-  PyVTKReference_Delete,          // tp_dealloc
-  0,                              // tp_vectorcall_offset
+  sizeof(PyVTKReference), // tp_basicsize
+  0,                      // tp_itemsize
+  PyVTKReference_Delete,  // tp_dealloc
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
   nullptr,                        // tp_getattr
   nullptr,                        // tp_setattr
   nullptr,                        // tp_compare
@@ -1137,10 +1149,14 @@ PyTypeObject PyVTKStringReference_Type = { PyVarObject_HEAD_INIT(&PyType_Type,
 //--------------------------------------------------------------------
 PyTypeObject PyVTKTupleReference_Type = { PyVarObject_HEAD_INIT(&PyType_Type,
                                             0) "vtkCommonCorePython.tuple_reference", // tp_name
-  sizeof(PyVTKReference),     // tp_basicsize
-  0,                          // tp_itemsize
-  PyVTKReference_Delete,      // tp_dealloc
-  0,                          // tp_vectorcall_offset
+  sizeof(PyVTKReference), // tp_basicsize
+  0,                      // tp_itemsize
+  PyVTKReference_Delete,  // tp_dealloc
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
   nullptr,                    // tp_getattr
   nullptr,                    // tp_setattr
   nullptr,                    // tp_compare
diff --git a/Wrapping/PythonCore/PyVTKTemplate.cxx b/Wrapping/PythonCore/PyVTKTemplate.cxx
index 60f09473e59..a129585e39e 100644
--- a/Wrapping/PythonCore/PyVTKTemplate.cxx
+++ b/Wrapping/PythonCore/PyVTKTemplate.cxx
@@ -259,10 +259,14 @@ static PyObject* PyVTKTemplate_Call(PyObject*, PyObject*, PyObject*)
 //--------------------------------------------------------------------
 PyTypeObject PyVTKTemplate_Type = { PyVarObject_HEAD_INIT(
                                       &PyType_Type, 0) "vtkCommonCorePython.template", // tp_name
-  0,                        // tp_basicsize
-  0,                        // tp_itemsize
-  nullptr,                  // tp_dealloc
-  0,                        // tp_vectorcall_offset
+  0,       // tp_basicsize
+  0,       // tp_itemsize
+  nullptr, // tp_dealloc
+#if PY_VERSION_HEX >= 0x03080000
+  0, // tp_vectorcall_offset
+#else
+  nullptr, // tp_print
+#endif
   nullptr,                  // tp_getattr
   nullptr,                  // tp_setattr
   nullptr,                  // tp_compare
-- 
GitLab

